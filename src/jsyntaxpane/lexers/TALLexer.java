/* The following code was generated by JFlex 1.4.2 on 6/28/08 3:41 PM */


/* TAL Syntax By Ayman Al-Sairafi */

package jsyntaxpane.lexers;

import jsyntaxpane.Lexer;
import jsyntaxpane.Token;
import jsyntaxpane.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on 6/28/08 3:41 PM from the specification file
 * <tt>C:/Ayman/NCB/Java/JSyntaxPane/src/jsyntaxpane/lexers/tal.flex</tt>
 */
public final class TALLexer implements Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\4\1\25"+
    "\2\0\1\15\1\0\1\26\1\50\1\51\1\53\1\24\1\53\1\5"+
    "\1\22\1\53\1\10\1\17\1\43\1\16\4\20\2\11\1\57\1\53"+
    "\1\56\1\54\1\55\1\46\1\0\1\14\1\30\1\41\1\34\1\23"+
    "\1\21\1\31\1\42\1\32\2\6\1\12\1\6\1\33\1\44\1\47"+
    "\1\6\1\37\1\35\1\36\1\40\1\6\1\45\1\13\1\52\1\6"+
    "\1\53\1\27\1\53\1\7\1\6\1\0\1\14\1\30\1\41\1\34"+
    "\1\23\1\21\1\31\1\42\1\32\2\6\1\12\1\6\1\33\1\44"+
    "\1\47\1\6\1\37\1\35\1\36\1\40\1\6\1\45\1\13\1\52"+
    "\1\6\1\53\1\0\1\53\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\3\1\2\2\1\3\2\4\1\3\1\1\1\3"+
    "\1\2\1\3\1\2\2\1\5\3\4\2\1\0\3\5"+
    "\3\4\1\0\3\4\1\0\1\3\2\4\4\3\4\0"+
    "\3\3\1\6\3\3\2\0\3\4\1\0\1\4\1\3"+
    "\1\4\4\3\1\7\1\0\2\3\1\10\3\3\2\0"+
    "\2\4\1\3\1\4\5\3\1\10\1\0\4\3\2\0"+
    "\2\4\1\3\1\4\2\3\1\0\3\3\1\0\1\6"+
    "\2\4\1\3\1\4\1\3\1\0\1\6\1\0\3\4"+
    "\1\3\1\10\1\0\3\4\1\3\6\4\1\0\2\4"+
    "\1\0\2\4\1\0\2\4\1\0\2\4\1\0\2\4"+
    "\1\0\1\4\1\0\1\4\1\0\5\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\60\0\u02a0"+
    "\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420"+
    "\0\u0450\0\u0480\0\300\0\u04b0\0\60\0\u04e0\0\u0510\0\u0540"+
    "\0\60\0\u0570\0\u05a0\0\u05d0\0\u0600\0\u0630\0\u0660\0\u0690"+
    "\0\u06c0\0\u06f0\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810"+
    "\0\u0840\0\u0870\0\u08a0\0\u08d0\0\u0120\0\u0900\0\u0930\0\u0960"+
    "\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0"+
    "\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\60\0\u0c00\0\u0c30"+
    "\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50\0\u0d80\0\u0db0"+
    "\0\u0de0\0\u0e10\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30"+
    "\0\u0120\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0\0\u1020\0\u1050\0\u1080"+
    "\0\u10b0\0\u10e0\0\u1110\0\u1140\0\u1170\0\u11a0\0\u11d0\0\u1200"+
    "\0\u1230\0\u1260\0\u1290\0\60\0\u12c0\0\u12f0\0\u1320\0\u1350"+
    "\0\u1380\0\u13b0\0\u13e0\0\u1410\0\u1440\0\u1470\0\u14a0\0\u14d0"+
    "\0\60\0\u1500\0\u1530\0\u1560\0\u1590\0\u15c0\0\u15f0\0\u1620"+
    "\0\u1650\0\u1680\0\u16b0\0\u16e0\0\u1710\0\u1740\0\u1770\0\u17a0"+
    "\0\u17d0\0\u1800\0\u1830\0\u1860\0\u1890\0\u18c0\0\u18f0\0\u1920"+
    "\0\u1950\0\u1980\0\u19b0\0\u19e0\0\u1a10\0\u1a40\0\u1a70\0\u1aa0"+
    "\0\u1ad0\0\u1b00\0\u1b30\0\u1b60\0\u1b90";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\7\1\2"+
    "\1\10\1\11\1\12\2\7\1\13\3\11\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\2\1\22\1\7\1\23"+
    "\1\7\1\24\1\25\5\7\1\11\1\7\1\26\1\27"+
    "\1\7\2\17\1\7\2\17\1\30\1\31\1\32\62\0"+
    "\1\2\60\0\1\4\54\0\1\33\1\34\1\35\1\33"+
    "\1\35\53\33\5\0\1\36\60\0\7\7\1\0\4\7"+
    "\1\0\1\7\4\0\16\7\1\0\1\7\2\0\1\7"+
    "\15\0\1\37\1\40\1\41\1\42\2\0\1\43\1\44"+
    "\1\43\1\41\1\45\1\46\10\0\1\41\6\0\1\43"+
    "\24\0\2\11\1\41\3\0\3\11\1\41\1\45\1\46"+
    "\10\0\1\41\6\0\1\11\22\0\7\7\1\0\4\7"+
    "\1\0\1\7\4\0\2\7\1\47\13\7\1\0\1\7"+
    "\2\0\1\7\15\0\1\50\5\0\2\51\1\50\22\0"+
    "\1\51\22\0\4\7\1\52\2\7\1\0\4\7\1\0"+
    "\1\7\4\0\2\7\1\53\11\7\1\54\1\7\1\0"+
    "\1\7\2\0\1\7\15\0\2\45\4\0\3\45\22\0"+
    "\1\45\22\0\7\7\1\0\4\7\1\0\1\7\4\0"+
    "\3\7\1\55\12\7\1\0\1\7\2\0\1\7\5\0"+
    "\1\56\2\0\22\56\1\0\1\56\1\0\30\56\1\57"+
    "\2\0\23\57\2\0\24\57\1\60\2\57\1\61\6\0"+
    "\7\7\1\0\4\7\1\0\1\62\4\0\16\7\1\0"+
    "\1\7\2\0\1\63\13\0\7\7\1\0\4\7\1\0"+
    "\1\7\4\0\3\7\1\64\12\7\1\0\1\7\2\0"+
    "\1\7\13\0\7\7\1\0\4\7\1\0\1\7\4\0"+
    "\14\7\1\65\1\7\1\0\1\7\2\0\1\7\13\0"+
    "\7\7\1\0\4\7\1\0\1\7\4\0\6\7\1\66"+
    "\3\7\1\67\3\7\1\0\1\7\2\0\1\7\13\0"+
    "\7\7\1\0\4\7\1\0\1\7\4\0\12\7\1\70"+
    "\3\7\1\0\1\7\2\0\1\7\42\0\1\71\11\0"+
    "\1\72\65\0\1\17\57\0\2\17\55\0\1\17\5\0"+
    "\1\35\55\0\1\36\1\34\1\35\55\36\10\0\1\37"+
    "\1\40\1\41\3\0\1\43\1\44\1\43\1\41\1\45"+
    "\1\46\10\0\1\41\6\0\1\43\24\0\2\40\4\0"+
    "\3\40\1\41\1\45\1\46\10\0\1\41\6\0\1\40"+
    "\24\0\1\73\1\74\2\0\1\74\1\0\4\74\1\0"+
    "\1\74\4\0\1\74\3\0\1\74\4\0\1\74\1\0"+
    "\1\74\24\0\1\75\1\40\1\41\3\0\3\75\1\41"+
    "\1\45\1\46\10\0\1\41\6\0\1\75\24\0\1\43"+
    "\1\40\1\41\3\0\3\43\1\41\1\45\1\46\10\0"+
    "\1\41\6\0\1\43\24\0\2\45\4\0\3\45\1\41"+
    "\1\0\1\46\10\0\1\41\6\0\1\45\21\0\1\76"+
    "\2\0\2\77\4\0\3\77\3\0\1\76\16\0\1\77"+
    "\22\0\7\7\1\0\4\7\1\0\1\7\4\0\6\7"+
    "\1\100\7\7\1\0\1\7\2\0\1\7\15\0\1\101"+
    "\5\0\3\101\22\0\1\101\24\0\1\50\5\0\3\50"+
    "\22\0\1\50\22\0\7\7\1\0\4\7\1\0\1\7"+
    "\4\0\14\7\1\102\1\7\1\0\1\7\2\0\1\7"+
    "\13\0\4\7\1\103\1\104\1\7\1\0\4\7\1\0"+
    "\1\105\4\0\16\7\1\0\1\7\2\0\1\7\13\0"+
    "\7\7\1\0\4\7\1\0\1\7\4\0\7\7\1\65"+
    "\6\7\1\0\1\7\2\0\1\7\13\0\7\7\1\0"+
    "\4\7\1\0\1\7\4\0\4\7\1\65\11\7\1\0"+
    "\1\7\2\0\1\7\5\0\1\56\2\0\22\56\1\106"+
    "\1\56\1\0\30\56\26\0\1\106\57\0\1\106\30\0"+
    "\1\107\26\0\1\106\25\0\1\107\11\0\7\7\1\0"+
    "\4\7\1\0\1\7\4\0\1\7\1\110\14\7\1\0"+
    "\1\7\2\0\1\7\13\0\7\7\1\0\4\7\1\0"+
    "\1\7\4\0\6\7\1\111\7\7\1\0\1\7\2\0"+
    "\1\7\13\0\7\7\1\0\4\7\1\0\1\7\4\0"+
    "\6\7\1\112\7\7\1\0\1\7\2\0\1\7\13\0"+
    "\7\7\1\0\4\7\1\0\1\7\4\0\7\7\1\113"+
    "\6\7\1\0\1\7\2\0\1\7\13\0\6\7\1\114"+
    "\1\0\4\7\1\0\1\7\4\0\16\7\1\0\1\7"+
    "\2\0\1\7\13\0\7\7\1\0\4\7\1\0\1\7"+
    "\4\0\2\7\1\115\13\7\1\0\1\7\2\0\1\7"+
    "\30\0\1\116\50\0\1\117\53\0\1\73\1\74\1\41"+
    "\1\0\1\74\1\0\4\74\1\0\1\74\4\0\1\74"+
    "\3\0\1\74\4\0\1\74\1\0\1\74\24\0\2\120"+
    "\1\41\1\0\1\120\1\0\4\120\1\0\1\120\4\0"+
    "\1\120\3\0\1\120\4\0\1\120\1\0\1\120\24\0"+
    "\1\121\1\40\1\41\3\0\3\121\1\41\1\45\1\46"+
    "\10\0\1\41\6\0\1\121\24\0\2\77\4\0\3\77"+
    "\22\0\1\77\24\0\2\77\4\0\3\77\1\41\12\0"+
    "\1\41\6\0\1\77\22\0\7\7\1\0\4\7\1\0"+
    "\1\122\4\0\16\7\1\0\1\7\2\0\1\7\15\0"+
    "\1\123\5\0\3\123\22\0\1\123\22\0\6\7\1\124"+
    "\1\0\4\7\1\0\1\7\4\0\16\7\1\0\1\7"+
    "\2\0\1\7\13\0\4\7\1\125\2\7\1\0\4\7"+
    "\1\0\1\7\4\0\16\7\1\0\1\7\2\0\1\7"+
    "\13\0\7\7\1\0\4\7\1\0\1\126\4\0\16\7"+
    "\1\0\1\7\2\0\1\7\13\0\4\7\1\127\2\7"+
    "\1\0\4\7\1\0\1\7\4\0\16\7\1\0\1\7"+
    "\2\0\1\7\33\0\1\17\37\0\7\7\1\0\4\7"+
    "\1\0\1\7\4\0\2\7\1\130\13\7\1\0\1\7"+
    "\2\0\1\7\13\0\7\7\1\0\4\7\1\0\1\131"+
    "\4\0\16\7\1\0\1\7\2\0\1\7\13\0\7\7"+
    "\1\0\4\7\1\0\1\7\4\0\16\7\1\0\1\7"+
    "\1\132\1\0\1\7\13\0\7\7\1\0\4\7\1\0"+
    "\1\7\4\0\2\7\1\133\5\7\1\134\5\7\1\0"+
    "\1\7\2\0\1\7\13\0\7\7\1\0\4\7\1\0"+
    "\1\7\4\0\7\7\1\135\6\7\1\0\1\7\2\0"+
    "\1\7\13\0\4\7\1\136\2\7\1\0\4\7\1\0"+
    "\1\7\4\0\16\7\1\0\1\7\2\0\1\7\46\0"+
    "\1\137\47\0\1\140\36\0\2\141\1\41\1\0\1\141"+
    "\1\0\4\141\1\0\1\141\4\0\1\141\3\0\1\141"+
    "\4\0\1\141\1\0\1\141\24\0\1\142\1\40\1\41"+
    "\3\0\3\142\1\41\1\45\1\46\10\0\1\41\6\0"+
    "\1\142\22\0\7\7\1\0\4\7\1\0\1\7\4\0"+
    "\7\7\1\143\6\7\1\0\1\7\2\0\1\7\15\0"+
    "\1\144\5\0\3\144\22\0\1\144\22\0\7\7\1\0"+
    "\4\7\1\0\1\7\4\0\6\7\1\131\7\7\1\0"+
    "\1\7\2\0\1\7\13\0\7\7\1\0\4\7\1\0"+
    "\1\145\4\0\16\7\1\0\1\7\2\0\1\7\13\0"+
    "\7\7\1\0\4\7\1\0\1\7\4\0\4\7\1\131"+
    "\11\7\1\0\1\7\2\0\1\7\13\0\7\7\1\0"+
    "\4\7\1\0\1\7\4\0\4\7\1\146\11\7\1\0"+
    "\1\7\2\0\1\7\13\0\7\7\1\0\4\7\1\0"+
    "\1\7\4\0\3\7\1\65\12\7\1\0\1\7\2\0"+
    "\1\7\23\0\1\147\47\0\7\7\1\0\4\7\1\0"+
    "\1\7\4\0\3\7\1\150\12\7\1\0\1\7\2\0"+
    "\1\7\13\0\7\7\1\0\4\7\1\0\1\7\4\0"+
    "\11\7\1\151\4\7\1\0\1\7\2\0\1\7\13\0"+
    "\7\7\1\0\4\7\1\0\1\152\4\0\16\7\1\0"+
    "\1\7\2\0\1\7\13\0\7\7\1\0\4\7\1\0"+
    "\1\65\4\0\16\7\1\0\1\7\2\0\1\7\43\0"+
    "\1\153\44\0\1\154\44\0\2\155\1\41\1\0\1\155"+
    "\1\0\4\155\1\0\1\155\4\0\1\155\3\0\1\155"+
    "\4\0\1\155\1\0\1\155\24\0\1\156\1\40\1\41"+
    "\3\0\3\156\1\41\1\45\1\46\10\0\1\41\6\0"+
    "\1\156\22\0\6\7\1\157\1\0\4\7\1\0\1\7"+
    "\4\0\16\7\1\0\1\7\2\0\1\7\15\0\1\160"+
    "\5\0\3\160\22\0\1\160\22\0\7\7\1\0\4\7"+
    "\1\0\1\7\4\0\7\7\1\131\6\7\1\0\1\7"+
    "\2\0\1\7\13\0\6\7\1\161\1\0\4\7\1\0"+
    "\1\7\4\0\16\7\1\0\1\7\2\0\1\7\50\0"+
    "\1\162\22\0\7\7\1\0\4\7\1\0\1\7\4\0"+
    "\1\7\1\131\14\7\1\0\1\7\2\0\1\7\13\0"+
    "\7\7\1\0\4\7\1\0\1\7\4\0\6\7\1\65"+
    "\7\7\1\0\1\7\2\0\1\7\13\0\7\7\1\0"+
    "\4\7\1\0\1\7\4\0\4\7\1\163\11\7\1\0"+
    "\1\7\2\0\1\7\37\0\1\164\35\0\2\165\1\41"+
    "\1\0\1\165\1\0\4\165\1\0\1\165\4\0\1\165"+
    "\3\0\1\165\4\0\1\165\1\0\1\165\24\0\1\166"+
    "\1\40\1\41\3\0\3\166\1\41\1\45\1\46\10\0"+
    "\1\41\6\0\1\166\22\0\4\7\1\65\2\7\1\0"+
    "\4\7\1\0\1\7\4\0\16\7\1\0\1\7\2\0"+
    "\1\7\15\0\1\167\5\0\3\167\22\0\1\167\22\0"+
    "\4\7\1\170\2\7\1\0\4\7\1\0\1\7\4\0"+
    "\16\7\1\0\1\7\2\0\1\7\56\0\1\171\14\0"+
    "\7\7\1\0\4\7\1\0\1\7\4\0\13\7\1\65"+
    "\2\7\1\0\1\7\2\0\1\7\51\0\1\172\23\0"+
    "\2\173\1\41\1\0\1\173\1\0\4\173\1\0\1\173"+
    "\4\0\1\173\3\0\1\173\4\0\1\173\1\0\1\173"+
    "\24\0\1\174\1\40\1\41\3\0\3\174\1\41\1\45"+
    "\1\46\10\0\1\41\6\0\1\174\24\0\1\175\5\0"+
    "\3\175\22\0\1\175\22\0\7\7\1\0\4\7\1\0"+
    "\1\7\4\0\2\7\1\176\13\7\1\0\1\7\2\0"+
    "\1\7\40\0\1\154\34\0\2\177\1\41\1\0\1\177"+
    "\1\0\4\177\1\0\1\177\4\0\1\177\3\0\1\177"+
    "\4\0\1\177\1\0\1\177\24\0\1\200\1\40\1\41"+
    "\3\0\3\200\1\41\1\45\1\46\10\0\1\41\6\0"+
    "\1\200\24\0\1\201\5\0\3\201\22\0\1\201\22\0"+
    "\7\7\1\0\4\7\1\0\1\7\4\0\1\7\1\130"+
    "\14\7\1\0\1\7\2\0\1\7\15\0\2\202\1\41"+
    "\1\0\1\202\1\0\4\202\1\0\1\202\4\0\1\202"+
    "\3\0\1\202\4\0\1\202\1\0\1\202\24\0\1\203"+
    "\1\40\1\41\3\0\3\203\1\41\1\45\1\46\10\0"+
    "\1\41\6\0\1\203\24\0\1\204\5\0\3\204\22\0"+
    "\1\204\24\0\2\205\1\41\1\0\1\205\1\0\4\205"+
    "\1\0\1\205\4\0\1\205\3\0\1\205\4\0\1\205"+
    "\1\0\1\205\24\0\1\206\1\40\1\41\3\0\3\206"+
    "\1\41\1\45\1\46\10\0\1\41\6\0\1\206\24\0"+
    "\1\207\5\0\3\207\22\0\1\207\24\0\2\210\1\41"+
    "\1\0\1\210\1\0\4\210\1\0\1\210\4\0\1\210"+
    "\3\0\1\210\4\0\1\210\1\0\1\210\24\0\1\211"+
    "\1\40\1\41\3\0\3\211\1\41\1\45\1\46\10\0"+
    "\1\41\6\0\1\211\24\0\1\212\5\0\3\212\22\0"+
    "\1\212\24\0\2\213\1\41\1\0\1\213\1\0\4\213"+
    "\1\0\1\213\4\0\1\213\3\0\1\213\4\0\1\213"+
    "\1\0\1\213\24\0\1\214\1\40\1\41\3\0\3\214"+
    "\1\41\1\45\1\46\10\0\1\41\6\0\1\214\24\0"+
    "\1\215\5\0\3\215\22\0\1\215\24\0\2\216\1\41"+
    "\1\0\1\216\1\0\4\216\1\0\1\216\4\0\1\216"+
    "\3\0\1\216\4\0\1\216\1\0\1\216\24\0\1\217"+
    "\1\40\1\41\3\0\3\217\1\41\1\45\1\46\10\0"+
    "\1\41\6\0\1\217\24\0\1\220\5\0\3\220\22\0"+
    "\1\220\24\0\2\221\1\41\1\0\1\221\1\0\4\221"+
    "\1\0\1\221\4\0\1\221\3\0\1\221\4\0\1\221"+
    "\1\0\1\221\24\0\1\222\1\40\1\41\3\0\3\222"+
    "\1\41\1\45\1\46\10\0\1\41\6\0\1\222\24\0"+
    "\1\223\5\0\3\223\22\0\1\223\24\0\2\224\1\41"+
    "\1\0\1\224\1\0\4\224\1\0\1\224\4\0\1\224"+
    "\3\0\1\224\4\0\1\224\1\0\1\224\24\0\1\225"+
    "\1\40\1\41\3\0\3\225\1\41\1\45\1\46\10\0"+
    "\1\41\6\0\1\225\24\0\1\41\5\0\3\41\22\0"+
    "\1\41\24\0\2\226\1\41\1\0\1\226\1\0\4\226"+
    "\1\0\1\226\4\0\1\226\3\0\1\226\4\0\1\226"+
    "\1\0\1\226\24\0\1\227\1\40\1\41\3\0\3\227"+
    "\1\41\1\45\1\46\10\0\1\41\6\0\1\227\24\0"+
    "\2\230\1\41\1\0\1\230\1\0\4\230\1\0\1\230"+
    "\4\0\1\230\3\0\1\230\4\0\1\230\1\0\1\230"+
    "\24\0\1\231\1\40\1\41\3\0\3\231\1\41\1\45"+
    "\1\46\10\0\1\41\6\0\1\231\26\0\1\41\55\0"+
    "\1\232\1\40\1\41\3\0\3\232\1\41\1\45\1\46"+
    "\10\0\1\41\6\0\1\232\24\0\1\233\1\40\1\41"+
    "\3\0\3\233\1\41\1\45\1\46\10\0\1\41\6\0"+
    "\1\233\24\0\1\234\1\40\1\41\3\0\3\234\1\41"+
    "\1\45\1\46\10\0\1\41\6\0\1\234\24\0\1\235"+
    "\1\40\1\41\3\0\3\235\1\41\1\45\1\46\10\0"+
    "\1\41\6\0\1\235\24\0\2\40\1\41\3\0\3\40"+
    "\1\41\1\45\1\46\10\0\1\41\6\0\1\40\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7104];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\14\1\1\11\13\1\1\0\1\1\1\11"+
    "\3\1\1\11\1\0\3\1\1\0\7\1\4\0\7\1"+
    "\2\0\3\1\1\0\7\1\1\11\1\0\6\1\2\0"+
    "\12\1\1\0\4\1\2\0\6\1\1\0\3\1\1\0"+
    "\1\11\5\1\1\0\1\1\1\0\4\1\1\11\1\0"+
    "\12\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    /**
     * Create an empty lexer, yyrset will be called later to reset and assign
     * the reader
     */
    public TALLexer() {
        super();
    }

    private Token token(TokenType type) {
        return new Token(type, yychar, yylength());
    }

    public static String[] LANGS = new String[] {"tal"};



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public TALLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public TALLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { return token(TokenType.STRING);
          }
        case 9: break;
        case 2: 
          { return token(TokenType.OPER);
          }
        case 10: break;
        case 6: 
          { return token(TokenType.KEYWORD);
          }
        case 11: break;
        case 3: 
          { return token(TokenType.IDENT);
          }
        case 12: break;
        case 8: 
          { return token(TokenType.TYPE);
          }
        case 13: break;
        case 4: 
          { return token(TokenType.NUMBER);
          }
        case 14: break;
        case 5: 
          { return token(TokenType.COMMENT);
          }
        case 15: break;
        case 1: 
          { 
          }
        case 16: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return null;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
