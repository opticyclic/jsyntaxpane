/* The following code was generated by JFlex 1.4.2 on 6/28/08 3:41 PM */


/* JavaScript language lexer specification 
   Modified from Java Lexer Specs by Ayman Al-Sairafi
*/

package jsyntaxpane.lexers;

import jsyntaxpane.Lexer;
import jsyntaxpane.Token;
import jsyntaxpane.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on 6/28/08 3:41 PM from the specification file
 * <tt>C:/Ayman/NCB/Java/JSyntaxPane/src/jsyntaxpane/lexers/javascript.flex</tt>
 */
public final class JavaScriptLexer implements Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\64"+
    "\1\70\1\0\1\6\1\64\1\65\1\0\1\60\1\60\1\5\1\67"+
    "\1\60\1\23\1\21\1\4\1\10\1\16\2\15\4\17\2\11\1\57"+
    "\1\60\1\63\1\61\1\62\1\60\1\0\1\51\1\52\1\14\1\20"+
    "\1\22\1\20\5\6\1\12\5\6\1\53\1\56\4\6\1\13\2\6"+
    "\1\60\1\24\1\60\1\64\1\6\1\0\1\30\1\25\1\32\1\42"+
    "\1\27\1\44\1\47\1\35\1\40\1\6\1\31\1\43\1\6\1\37"+
    "\1\36\1\55\1\6\1\26\1\33\1\34\1\41\1\50\1\46\1\54"+
    "\1\45\1\6\1\60\1\66\1\60\1\60\41\7\2\0\4\6\4\0"+
    "\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0\27\6\1\0"+
    "\37\6\1\0\u013f\6\31\0\162\6\4\0\14\6\16\0\5\6\11\0"+
    "\1\6\21\0\130\7\5\0\23\7\12\0\1\6\13\0\1\6\1\0"+
    "\3\6\1\0\1\6\1\0\24\6\1\0\54\6\1\0\46\6\1\0"+
    "\5\6\4\0\202\6\1\0\4\7\3\0\105\6\1\0\46\6\2\0"+
    "\2\6\6\0\20\6\41\0\46\6\2\0\1\6\7\0\47\6\11\0"+
    "\21\7\1\0\27\7\1\0\3\7\1\0\1\7\1\0\2\7\1\0"+
    "\1\7\13\0\33\6\5\0\3\6\15\0\4\7\14\0\6\7\13\0"+
    "\32\6\5\0\13\6\16\7\7\0\12\7\4\0\2\6\1\7\143\6"+
    "\1\0\1\6\10\7\1\0\6\7\2\6\2\7\1\0\4\7\2\6"+
    "\12\7\3\6\2\0\1\6\17\0\1\7\1\6\1\7\36\6\33\7"+
    "\2\0\3\6\60\0\46\6\13\7\1\6\u014f\0\3\7\66\6\2\0"+
    "\1\7\1\6\20\7\2\0\1\6\4\7\3\0\12\6\2\7\2\0"+
    "\12\7\21\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6\7\7\2\0"+
    "\2\7\2\0\3\7\11\0\1\7\4\0\2\6\1\0\3\6\2\7"+
    "\2\0\12\7\4\6\15\0\3\7\1\0\6\6\4\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0"+
    "\1\7\1\0\5\7\4\0\2\7\2\0\3\7\13\0\4\6\1\0"+
    "\1\6\7\0\14\7\3\6\14\0\3\7\1\0\11\6\1\0\3\6"+
    "\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7"+
    "\1\6\10\7\1\0\3\7\1\0\3\7\2\0\1\6\17\0\2\6"+
    "\2\7\2\0\12\7\1\0\1\6\17\0\3\7\1\0\10\6\2\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0"+
    "\1\7\1\6\6\7\3\0\2\7\2\0\3\7\10\0\2\7\4\0"+
    "\2\6\1\0\3\6\4\0\12\7\1\0\1\6\20\0\1\7\1\6"+
    "\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6"+
    "\1\0\2\6\3\0\2\6\3\0\3\6\3\0\10\6\1\0\3\6"+
    "\4\0\5\7\3\0\3\7\1\0\4\7\11\0\1\7\17\0\11\7"+
    "\11\0\1\6\7\0\3\7\1\0\10\6\1\0\3\6\1\0\27\6"+
    "\1\0\12\6\1\0\5\6\4\0\7\7\1\0\3\7\1\0\4\7"+
    "\7\0\2\7\11\0\2\6\4\0\12\7\22\0\2\7\1\0\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\2\0\1\7"+
    "\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7\7\0\1\6"+
    "\1\0\2\6\4\0\12\7\22\0\2\7\1\0\10\6\1\0\3\6"+
    "\1\0\27\6\1\0\20\6\4\0\6\7\2\0\3\7\1\0\4\7"+
    "\11\0\1\7\10\0\2\6\4\0\12\7\22\0\2\7\1\0\22\6"+
    "\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6\3\0\1\7"+
    "\4\0\6\7\1\0\1\7\1\0\10\7\22\0\2\7\15\0\60\6"+
    "\1\7\2\6\7\7\4\0\10\6\10\7\1\0\12\7\47\0\2\6"+
    "\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6"+
    "\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6"+
    "\1\0\4\6\1\7\2\6\6\7\1\0\2\7\1\6\2\0\5\6"+
    "\1\0\1\6\1\0\6\7\2\0\12\7\2\0\2\6\42\0\1\6"+
    "\27\0\2\7\6\0\12\7\13\0\1\7\1\0\1\7\1\0\1\7"+
    "\4\0\2\7\10\6\1\0\42\6\6\0\24\7\1\0\2\7\4\6"+
    "\4\0\10\7\1\0\44\7\11\0\1\7\71\0\42\6\1\0\5\6"+
    "\1\0\2\6\1\0\7\7\3\0\4\7\6\0\12\7\6\0\6\6"+
    "\4\7\106\0\46\6\12\0\51\6\7\0\132\6\5\0\104\6\5\0"+
    "\122\6\6\0\7\6\1\0\77\6\1\0\1\6\1\0\4\6\2\0"+
    "\7\6\1\0\1\6\1\0\4\6\2\0\47\6\1\0\1\6\1\0"+
    "\4\6\2\0\37\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0"+
    "\1\6\1\0\4\6\2\0\7\6\1\0\7\6\1\0\27\6\1\0"+
    "\37\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0\47\6\1\0"+
    "\23\6\16\0\11\7\56\0\125\6\14\0\u026c\6\2\0\10\6\12\0"+
    "\32\6\5\0\113\6\3\0\3\6\17\0\15\6\1\0\4\6\3\7"+
    "\13\0\22\6\3\7\13\0\22\6\2\7\14\0\15\6\1\0\3\6"+
    "\1\0\2\7\14\0\64\6\40\7\3\0\1\6\3\0\2\6\1\7"+
    "\2\0\12\7\41\0\3\7\2\0\12\7\6\0\130\6\10\0\51\6"+
    "\1\7\126\0\35\6\3\0\14\7\4\0\14\7\12\0\12\7\36\6"+
    "\2\0\5\6\u038b\0\154\6\224\0\234\6\4\0\132\6\6\0\26\6"+
    "\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6"+
    "\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6"+
    "\4\0\15\6\5\0\3\6\1\0\7\6\17\0\4\7\32\0\5\7"+
    "\20\0\2\6\23\0\1\6\13\0\4\7\6\0\6\7\1\0\1\6"+
    "\15\0\1\6\40\0\22\6\36\0\15\7\4\0\1\7\3\0\6\7"+
    "\27\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6\3\0\5\6"+
    "\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0\3\6"+
    "\1\0\7\6\3\0\3\6\5\0\5\6\26\0\44\6\u0e81\0\3\6"+
    "\31\0\11\6\6\7\1\0\5\6\2\0\5\6\4\0\126\6\2\0"+
    "\2\7\2\0\3\6\1\0\137\6\5\0\50\6\4\0\136\6\21\0"+
    "\30\6\70\0\20\6\u0200\0\u19b6\6\112\0\u51a6\6\132\0\u048d\6\u0773\0"+
    "\u2ba4\6\u215c\0\u012e\6\2\0\73\6\225\0\7\6\14\0\5\6\5\0"+
    "\1\6\1\7\12\6\1\0\15\6\1\0\5\6\1\0\1\6\1\0"+
    "\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0"+
    "\66\6\50\0\15\6\3\0\20\7\20\0\4\7\17\0\2\6\30\0"+
    "\3\6\31\0\1\6\6\0\5\6\1\0\207\6\2\0\1\7\4\0"+
    "\1\6\13\0\12\7\7\0\32\6\4\0\1\6\1\0\32\6\12\0"+
    "\132\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6\3\0"+
    "\2\6\3\0\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\3\1\2\2\1\3\2\4\2\2\21\3\6\2"+
    "\1\5\1\6\2\7\1\1\1\10\1\11\1\0\1\12"+
    "\3\4\1\0\3\4\1\0\12\3\1\13\13\3\1\2"+
    "\1\14\2\6\2\11\2\0\4\4\1\0\23\3\1\6"+
    "\1\0\2\4\13\3\2\4\5\3\1\12\3\3\2\4"+
    "\5\3\10\4\1\0\1\4\1\0\1\4\1\0\1\4"+
    "\1\0\1\4\1\0\1\4\1\0\1\4\1\0\1\4"+
    "\1\0\5\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357"+
    "\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6\0\u051f"+
    "\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\162\0\u0675\0\u06ae"+
    "\0\u06e7\0\u0720\0\u0759\0\162\0\u0792\0\u07cb\0\162\0\u0804"+
    "\0\162\0\u083d\0\u0876\0\162\0\u08af\0\u08e8\0\162\0\u0921"+
    "\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9"+
    "\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u018f\0\u0c78"+
    "\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40"+
    "\0\u0e79\0\u0eb2\0\u0eeb\0\162\0\u0f24\0\u0f5d\0\u0f96\0\162"+
    "\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e"+
    "\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326"+
    "\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee"+
    "\0\u1527\0\u1560\0\162\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d"+
    "\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845"+
    "\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d"+
    "\0\u018f\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c"+
    "\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64"+
    "\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c"+
    "\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u2082\0\u20bb\0\u20f4"+
    "\0\u212d\0\u2166\0\u219f\0\u21d8\0\u2211\0\u224a\0\u2283";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\3\1\5\1\6\1\7\1\10\1\3"+
    "\1\11\1\12\3\10\3\12\1\10\1\13\1\10\1\14"+
    "\1\3\1\15\1\16\1\17\2\10\1\20\1\21\1\22"+
    "\2\10\1\23\1\24\1\10\1\25\1\10\1\26\1\10"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\2\10\1\35"+
    "\2\36\1\7\1\37\1\40\1\7\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\21\45\1\50\43\45\1\51"+
    "\73\0\1\3\71\0\1\5\71\0\1\52\1\53\53\0"+
    "\1\36\70\0\1\36\15\0\13\10\1\0\1\10\2\0"+
    "\32\10\1\54\21\0\1\55\1\56\1\57\1\60\1\0"+
    "\1\61\1\62\1\61\1\57\1\63\1\64\4\0\1\64"+
    "\12\0\3\57\7\0\1\60\24\0\2\12\1\57\2\0"+
    "\3\12\1\57\1\63\1\64\4\0\1\64\12\0\3\57"+
    "\34\0\2\63\3\0\3\63\74\0\1\36\35\0\1\36"+
    "\15\0\13\10\1\0\1\10\2\0\1\10\1\65\30\10"+
    "\1\54\17\0\13\10\1\0\1\10\2\0\2\10\1\66"+
    "\27\10\1\54\17\0\13\10\1\0\1\10\2\0\16\10"+
    "\1\67\13\10\1\54\17\0\13\10\1\0\1\10\2\0"+
    "\3\10\1\70\5\10\1\71\20\10\1\54\17\0\13\10"+
    "\1\0\1\10\2\0\21\10\1\72\10\10\1\54\17\0"+
    "\13\10\1\0\1\10\2\0\1\10\1\73\6\10\1\74"+
    "\21\10\1\54\17\0\13\10\1\0\1\10\2\0\2\10"+
    "\1\75\11\10\1\76\15\10\1\54\17\0\13\10\1\0"+
    "\1\10\2\0\12\10\1\77\4\10\1\77\12\10\1\54"+
    "\17\0\13\10\1\0\1\10\2\0\2\10\1\100\6\10"+
    "\1\77\20\10\1\54\17\0\13\10\1\0\1\10\2\0"+
    "\3\10\1\17\5\10\1\101\1\10\1\102\1\103\15\10"+
    "\1\54\17\0\13\10\1\0\1\10\2\0\10\10\1\104"+
    "\2\10\1\105\16\10\1\54\17\0\13\10\1\0\1\10"+
    "\2\0\11\10\1\106\20\10\1\54\17\0\13\10\1\0"+
    "\1\10\2\0\3\10\1\101\26\10\1\54\17\0\13\10"+
    "\1\0\1\10\2\0\1\10\1\107\30\10\1\54\17\0"+
    "\13\10\1\0\1\10\2\0\11\10\1\110\20\10\1\54"+
    "\17\0\13\10\1\0\1\10\2\0\2\10\1\111\27\10"+
    "\1\54\17\0\13\10\1\0\1\10\2\0\7\10\1\112"+
    "\22\10\1\54\72\0\1\36\1\113\67\0\1\36\1\0"+
    "\1\7\66\0\1\36\3\0\1\36\64\0\1\36\4\0"+
    "\1\36\63\0\1\36\5\0\1\36\1\0\1\45\2\0"+
    "\21\45\1\0\43\45\3\0\1\47\66\0\2\114\1\0"+
    "\5\114\1\115\4\114\2\115\1\116\51\114\1\52\1\117"+
    "\1\120\66\52\5\121\1\122\63\121\10\0\1\55\1\56"+
    "\1\57\2\0\1\61\1\62\1\61\1\57\1\63\1\64"+
    "\4\0\1\64\12\0\3\57\34\0\2\56\3\0\3\56"+
    "\1\57\1\63\1\64\4\0\1\64\12\0\1\57\1\0"+
    "\1\57\34\0\1\123\1\124\2\0\5\124\1\0\1\124"+
    "\2\0\1\124\1\0\2\124\1\0\1\124\7\0\1\124"+
    "\1\0\1\124\4\0\2\124\26\0\1\125\1\56\1\57"+
    "\2\0\3\125\1\57\1\63\1\64\4\0\1\64\12\0"+
    "\3\57\34\0\1\61\1\56\1\57\2\0\3\61\1\57"+
    "\1\63\1\64\4\0\1\64\12\0\3\57\34\0\2\63"+
    "\3\0\3\63\1\57\1\0\1\64\4\0\1\64\12\0"+
    "\1\57\1\0\1\57\34\0\2\126\3\0\3\126\3\0"+
    "\1\127\43\0\1\127\7\0\13\10\1\0\1\10\2\0"+
    "\2\10\1\130\27\10\1\54\17\0\13\10\1\0\1\10"+
    "\2\0\7\10\1\131\22\10\1\54\17\0\13\10\1\0"+
    "\1\10\2\0\6\10\1\132\23\10\1\54\17\0\13\10"+
    "\1\0\1\10\2\0\6\10\1\132\1\133\22\10\1\54"+
    "\17\0\13\10\1\0\1\10\2\0\12\10\1\134\17\10"+
    "\1\54\17\0\13\10\1\0\1\10\2\0\13\10\1\135"+
    "\16\10\1\54\17\0\13\10\1\0\1\10\2\0\14\10"+
    "\1\132\3\10\1\77\11\10\1\54\17\0\13\10\1\0"+
    "\1\10\2\0\13\10\1\136\16\10\1\54\17\0\13\10"+
    "\1\0\1\10\2\0\21\10\1\77\10\10\1\54\17\0"+
    "\13\10\1\0\1\10\2\0\16\10\1\137\13\10\1\54"+
    "\17\0\13\10\1\0\1\10\2\0\16\10\1\140\1\141"+
    "\12\10\1\54\17\0\13\10\1\0\1\10\2\0\1\10"+
    "\1\77\30\10\1\54\17\0\13\10\1\0\1\10\2\0"+
    "\12\10\1\142\17\10\1\54\17\0\13\10\1\0\1\10"+
    "\2\0\12\10\1\143\17\10\1\54\17\0\13\10\1\0"+
    "\1\10\2\0\13\10\1\144\16\10\1\54\17\0\13\10"+
    "\1\0\1\10\2\0\7\10\1\145\22\10\1\54\17\0"+
    "\13\10\1\0\1\10\2\0\7\10\1\146\22\10\1\54"+
    "\17\0\13\10\1\0\1\10\2\0\1\10\1\147\30\10"+
    "\1\54\17\0\13\10\1\0\1\10\2\0\11\10\1\150"+
    "\20\10\1\54\17\0\13\10\1\0\1\10\2\0\22\10"+
    "\1\151\7\10\1\54\17\0\13\10\1\0\1\10\2\0"+
    "\1\10\1\152\30\10\1\54\72\0\1\36\1\7\16\0"+
    "\1\116\4\0\3\116\61\0\1\153\4\0\3\153\53\0"+
    "\1\120\66\0\5\121\1\154\63\121\4\0\1\120\1\122"+
    "\73\0\1\123\1\124\1\57\1\0\5\124\1\0\1\124"+
    "\2\0\1\124\1\0\2\124\1\0\1\124\7\0\1\124"+
    "\1\57\1\124\4\0\2\124\26\0\2\155\1\57\1\0"+
    "\5\155\1\0\1\155\2\0\1\155\1\0\2\155\1\0"+
    "\1\155\7\0\1\155\1\57\1\155\4\0\2\155\26\0"+
    "\1\156\1\56\1\57\2\0\3\156\1\57\1\63\1\64"+
    "\4\0\1\64\12\0\3\57\34\0\2\126\3\0\3\126"+
    "\1\57\21\0\1\57\1\0\1\57\34\0\2\126\3\0"+
    "\3\126\57\0\13\10\1\0\1\10\2\0\3\10\1\157"+
    "\26\10\1\54\17\0\13\10\1\0\1\10\2\0\14\10"+
    "\1\160\15\10\1\54\17\0\13\10\1\0\1\10\2\0"+
    "\2\10\1\77\27\10\1\54\17\0\13\10\1\0\1\10"+
    "\2\0\5\10\1\145\24\10\1\54\17\0\13\10\1\0"+
    "\1\10\2\0\7\10\1\161\22\10\1\54\17\0\13\10"+
    "\1\0\1\10\2\0\7\10\1\133\22\10\1\54\17\0"+
    "\13\10\1\0\1\10\2\0\6\10\1\77\23\10\1\54"+
    "\17\0\13\10\1\0\1\10\2\0\16\10\1\77\13\10"+
    "\1\54\17\0\13\10\1\0\1\10\2\0\2\10\1\162"+
    "\27\10\1\54\17\0\13\10\1\0\1\10\2\0\3\10"+
    "\1\163\26\10\1\54\17\0\13\10\1\0\1\10\2\0"+
    "\3\10\1\164\26\10\1\54\17\0\13\10\1\0\1\10"+
    "\2\0\5\10\1\165\24\10\1\54\17\0\13\10\1\0"+
    "\1\10\2\0\16\10\1\132\13\10\1\54\17\0\13\10"+
    "\1\0\1\10\2\0\10\10\1\77\21\10\1\54\17\0"+
    "\13\10\1\0\1\10\2\0\11\10\1\77\20\10\1\54"+
    "\17\0\13\10\1\0\1\10\2\0\3\10\1\166\26\10"+
    "\1\54\17\0\13\10\1\0\1\10\2\0\16\10\1\167"+
    "\13\10\1\54\17\0\13\10\1\0\1\170\2\0\32\10"+
    "\1\54\17\0\13\10\1\0\1\10\2\0\13\10\1\171"+
    "\16\10\1\54\11\0\4\121\1\120\1\154\63\121\10\0"+
    "\2\172\1\57\1\0\5\172\1\0\1\172\2\0\1\172"+
    "\1\0\2\172\1\0\1\172\7\0\1\172\1\57\1\172"+
    "\4\0\2\172\26\0\1\173\1\56\1\57\2\0\3\173"+
    "\1\57\1\63\1\64\4\0\1\64\12\0\3\57\32\0"+
    "\13\10\1\0\1\10\2\0\4\10\1\77\25\10\1\54"+
    "\17\0\13\10\1\0\1\10\2\0\1\10\1\174\30\10"+
    "\1\54\17\0\13\10\1\0\1\10\2\0\13\10\1\175"+
    "\16\10\1\54\17\0\13\10\1\0\1\10\2\0\7\10"+
    "\1\132\22\10\1\54\17\0\13\10\1\0\1\10\2\0"+
    "\14\10\1\176\15\10\1\54\17\0\13\10\1\0\1\10"+
    "\2\0\16\10\1\177\13\10\1\54\17\0\13\10\1\0"+
    "\1\10\2\0\7\10\1\200\22\10\1\54\17\0\13\10"+
    "\1\0\1\10\2\0\20\10\1\201\11\10\1\54\17\0"+
    "\13\10\1\0\1\10\2\0\2\10\1\202\27\10\1\54"+
    "\17\0\13\10\1\0\1\10\2\0\27\10\1\203\2\10"+
    "\1\54\17\0\13\10\1\0\1\10\2\0\12\10\1\204"+
    "\17\10\1\54\21\0\2\205\1\57\1\0\5\205\1\0"+
    "\1\205\2\0\1\205\1\0\2\205\1\0\1\205\7\0"+
    "\1\205\1\57\1\205\4\0\2\205\26\0\1\206\1\56"+
    "\1\57\2\0\3\206\1\57\1\63\1\64\4\0\1\64"+
    "\12\0\3\57\32\0\13\10\1\0\1\10\2\0\12\10"+
    "\1\77\17\10\1\54\17\0\13\10\1\0\1\10\2\0"+
    "\12\10\1\207\17\10\1\54\17\0\13\10\1\0\1\10"+
    "\2\0\16\10\1\210\13\10\1\54\17\0\13\10\1\0"+
    "\1\10\2\0\16\10\1\211\13\10\1\54\17\0\13\10"+
    "\1\0\1\10\2\0\13\10\1\212\16\10\1\54\17\0"+
    "\13\10\1\0\1\10\2\0\3\10\1\213\26\10\1\54"+
    "\17\0\13\10\1\0\1\10\2\0\30\10\1\201\1\10"+
    "\1\54\17\0\13\10\1\0\1\10\2\0\22\10\1\201"+
    "\7\10\1\54\21\0\2\214\1\57\1\0\5\214\1\0"+
    "\1\214\2\0\1\214\1\0\2\214\1\0\1\214\7\0"+
    "\1\214\1\57\1\214\4\0\2\214\26\0\1\215\1\56"+
    "\1\57\2\0\3\215\1\57\1\63\1\64\4\0\1\64"+
    "\12\0\3\57\32\0\13\10\1\0\1\10\2\0\14\10"+
    "\1\132\15\10\1\54\17\0\13\10\1\0\1\10\2\0"+
    "\7\10\1\77\22\10\1\54\17\0\13\10\1\0\1\10"+
    "\2\0\20\10\1\77\11\10\1\54\17\0\13\10\1\0"+
    "\1\10\2\0\11\10\1\174\20\10\1\54\17\0\13\10"+
    "\1\0\1\10\2\0\12\10\1\201\17\10\1\54\21\0"+
    "\2\216\1\57\1\0\5\216\1\0\1\216\2\0\1\216"+
    "\1\0\2\216\1\0\1\216\7\0\1\216\1\57\1\216"+
    "\4\0\2\216\26\0\1\217\1\56\1\57\2\0\3\217"+
    "\1\57\1\63\1\64\4\0\1\64\12\0\3\57\34\0"+
    "\2\220\1\57\1\0\5\220\1\0\1\220\2\0\1\220"+
    "\1\0\2\220\1\0\1\220\7\0\1\220\1\57\1\220"+
    "\4\0\2\220\26\0\1\221\1\56\1\57\2\0\3\221"+
    "\1\57\1\63\1\64\4\0\1\64\12\0\3\57\34\0"+
    "\2\222\1\57\1\0\5\222\1\0\1\222\2\0\1\222"+
    "\1\0\2\222\1\0\1\222\7\0\1\222\1\57\1\222"+
    "\4\0\2\222\26\0\1\223\1\56\1\57\2\0\3\223"+
    "\1\57\1\63\1\64\4\0\1\64\12\0\3\57\34\0"+
    "\2\224\1\57\1\0\5\224\1\0\1\224\2\0\1\224"+
    "\1\0\2\224\1\0\1\224\7\0\1\224\1\57\1\224"+
    "\4\0\2\224\26\0\1\225\1\56\1\57\2\0\3\225"+
    "\1\57\1\63\1\64\4\0\1\64\12\0\3\57\34\0"+
    "\2\226\1\57\1\0\5\226\1\0\1\226\2\0\1\226"+
    "\1\0\2\226\1\0\1\226\7\0\1\226\1\57\1\226"+
    "\4\0\2\226\26\0\1\227\1\56\1\57\2\0\3\227"+
    "\1\57\1\63\1\64\4\0\1\64\12\0\3\57\34\0"+
    "\2\230\1\57\1\0\5\230\1\0\1\230\2\0\1\230"+
    "\1\0\2\230\1\0\1\230\7\0\1\230\1\57\1\230"+
    "\4\0\2\230\26\0\1\231\1\56\1\57\2\0\3\231"+
    "\1\57\1\63\1\64\4\0\1\64\12\0\3\57\34\0"+
    "\2\232\1\57\1\0\5\232\1\0\1\232\2\0\1\232"+
    "\1\0\2\232\1\0\1\232\7\0\1\232\1\57\1\232"+
    "\4\0\2\232\26\0\1\233\1\56\1\57\2\0\3\233"+
    "\1\57\1\63\1\64\4\0\1\64\12\0\3\57\34\0"+
    "\2\234\1\57\1\0\5\234\1\0\1\234\2\0\1\234"+
    "\1\0\2\234\1\0\1\234\7\0\1\234\1\57\1\234"+
    "\4\0\2\234\26\0\1\235\1\56\1\57\2\0\3\235"+
    "\1\57\1\63\1\64\4\0\1\64\12\0\3\57\34\0"+
    "\2\236\1\57\1\0\5\236\1\0\1\236\2\0\1\236"+
    "\1\0\2\236\1\0\1\236\7\0\1\236\1\57\1\236"+
    "\4\0\2\236\26\0\1\237\1\56\1\57\2\0\3\237"+
    "\1\57\1\63\1\64\4\0\1\64\12\0\3\57\34\0"+
    "\2\240\1\57\1\0\5\240\1\0\1\240\2\0\1\240"+
    "\1\0\2\240\1\0\1\240\7\0\1\240\1\57\1\240"+
    "\4\0\2\240\26\0\1\241\1\56\1\57\2\0\3\241"+
    "\1\57\1\63\1\64\4\0\1\64\12\0\3\57\34\0"+
    "\2\242\1\57\1\0\5\242\1\0\1\242\2\0\1\242"+
    "\1\0\2\242\1\0\1\242\7\0\1\242\1\57\1\242"+
    "\4\0\2\242\26\0\1\243\1\56\1\57\2\0\3\243"+
    "\1\57\1\63\1\64\4\0\1\64\12\0\3\57\36\0"+
    "\1\57\30\0\1\57\35\0\1\244\1\56\1\57\2\0"+
    "\3\244\1\57\1\63\1\64\4\0\1\64\12\0\3\57"+
    "\34\0\1\245\1\56\1\57\2\0\3\245\1\57\1\63"+
    "\1\64\4\0\1\64\12\0\3\57\34\0\1\246\1\56"+
    "\1\57\2\0\3\246\1\57\1\63\1\64\4\0\1\64"+
    "\12\0\3\57\34\0\1\247\1\56\1\57\2\0\3\247"+
    "\1\57\1\63\1\64\4\0\1\64\12\0\3\57\34\0"+
    "\2\56\1\57\2\0\3\56\1\57\1\63\1\64\4\0"+
    "\1\64\12\0\3\57\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8892];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\32\1\1\11\5\1\1\11\2\1\1\11"+
    "\1\1\1\11\1\1\1\0\1\11\2\1\1\11\1\0"+
    "\3\1\1\0\27\1\1\11\3\1\1\11\2\0\4\1"+
    "\1\0\23\1\1\11\1\0\47\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    /**
     * Create an empty lexer, yyrset will be called later to reset and assign
     * the reader
     */
    public JavaScriptLexer() {
        super();
    }

    private Token token(TokenType type) {
        return new Token(type, yychar, yylength());
    }

    // These will be used to store Token Start positions and length for Complex 
    // Tokens that need deifferent Lexer States, like STRING
    int tokenStart;
    int tokenLength;

    public static String[] LANGS = new String[] {"javascript", "js", "rhino"};



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JavaScriptLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1792) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 11: 
          { return token(TokenType.KEYWORD);
          }
        case 13: break;
        case 5: 
          { yybegin(STRING); 
                                    tokenStart = yychar; 
                                    tokenLength = 1;
          }
        case 14: break;
        case 12: 
          { tokenLength += 2;
          }
        case 15: break;
        case 3: 
          { return token(TokenType.IDENT);
          }
        case 16: break;
        case 8: 
          { yybegin(YYINITIAL); 
                                     // length also includes the trailing quote
                                     return new Token(TokenType.STRING, tokenStart, tokenLength + 1);
          }
        case 17: break;
        case 9: 
          { return token(TokenType.COMMENT);
          }
        case 18: break;
        case 2: 
          { return token(TokenType.OPER);
          }
        case 19: break;
        case 10: 
          { return token(TokenType.TYPE);
          }
        case 20: break;
        case 4: 
          { return token(TokenType.NUMBER);
          }
        case 21: break;
        case 7: 
          { yybegin(YYINITIAL);
          }
        case 22: break;
        case 1: 
          { 
          }
        case 23: break;
        case 6: 
          { tokenLength += yylength();
          }
        case 24: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return null;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
